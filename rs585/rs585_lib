import minimalmodbus
import serial
import time

class MotorOriental:
    def __init__(self, port: str, slave_id: int):
        self.instrument = minimalmodbus.Instrument(port, slave_id, mode='rtu')
        self.instrument.serial.baudrate = 230400
        self.instrument.serial.bytesize = 8
        self.instrument.serial.parity = serial.PARITY_EVEN
        self.instrument.serial.stopbits = 1
        self.instrument.serial.timeout = 0.5  # seconds

    def S_ON(self):
        # Excite motor (S-ON) via Driver Input Command at 0x007C–0x007D
        self.instrument.write_registers(0x007C, [0x0000, 0x0001])
        time.sleep(0.1)

    def set_velocity(self, velocity: int):
        # Start continuous speed-control operation (STEP 3) at 0x005A–0x0067
        payload = [
            0x0000, 0x0030,             # Operation type = 0x0030 (speed control)
            0x0000, 0x0000,             # Position = 0
            (velocity >> 16) & 0xFFFF,  # Velocity high word
            velocity & 0xFFFF,          # Velocity low word
            0x0000, 0x03E8,             # Accel = 1000 ms
            0x0000, 0x09C4,             # Decel = 2500 ms
            0x0000, 0x03E8,             # Torque limit = 100.0%
            0x0000, 0x0001              # Trigger = 1 (normal start)
        ]
        self.instrument.write_registers(0x005A, payload)
        print(f"Velocity set to {velocity} r/min.")

    def stop(self):
        # STEP 7 Stop of operation: Operation type = 0, Velocity = 0
        stop_payload = [
            0x0000, 0x0000,  # Operation type = 0 (decel stop)
            0x0000, 0x0000,  # Position = 0
            0x0000, 0x0000,  # Velocity = 0
            0x0000, 0x03E8,  # Accel = 1000 ms
            0x0000, 0x09C4,  # Decel = 2500 ms
            0x0000, 0x03E8,  # Torque limit = 100.0%
            0x0000, 0x0001   # Trigger = 1 (normal stop)
        ]
        self.instrument.write_registers(0x005A, stop_payload)  # FC16 to 0x005A[1]
        time.sleep(0.1)
        print("Stop command sent ")